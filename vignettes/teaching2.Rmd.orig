---
title: "The Coordination Model and Extensions"
author: James Hollway
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{The Coordination Model and Extensions}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---


```{r knitr-setup, include = FALSE}
#| purl = FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "teaching/"
)
```

Example script prepared analyzing the Fisheries Agreements data with
the `R` `goldfish` package.
Models inspired by section 7 of:

> Stadtfeld, Hollway & Block (2017),
> "Dynamic Network Actor Models: Investigating Coordination Ties through Time",
> Sociological Methodology, 2017, 47(1): 1-40. DOI: 10.1177/0081175017709295

# Step 0: Load package and data

First, let's make sure we're starting with a clean slate and take
the goldfish out of the bowl:

```{r setup, message=FALSE}
library(goldfish)
```

This lazy loads several datasets, including the one we will now use:

```{r load-data}
data("Fisheries_Treaties_6070")
# ?Fisheries_Treaties_6070
```

Note that these objects are only 'promised' for the moment,
but are available in the environment to be used,
and more information will appear as you use them.
You can find out more about this dataset, its format,
and its origins in a couple of ERGM papers by calling its documentation.

# Step 1: Create data objects ####

## Step 1a: Define node set(s) and attributes ####

We've loaded a dataset that defines its nodes and their attributes
as a data frame.

```{r examine-states}
tail(states)
class(states)
```

We need to define them as nodes so that goldfish knows what to do with them.

```{r defineNodes}
states <- defineNodes(states)
head(states)
class(states)
```

As you can see, the structure is the same, 
but the added class helps goldfish interpret the data frame correctly.

Next we want to link events to this nodeset to indicate
how the attributes change.
There are three attributes associated with this node set,
and they all change:

```{r examine-node-changes}
head(sovchanges)
head(regchanges)
head(gdpchanges)
```

The first attribute, in the second column of the data frame, is special.
It holds the (reserved) "present" variable that indicates whether nodes
are available to send or receive ties.

```{r present}
head(states$present) # or states[,2]
```

Some state nodes are not present (do not hold sovereign status)
at the start of our study period.
But we do have an additional list of events detailing how these states gain
(and some lose) sovereign status during the study period.
To make sure goldfish recognises these changes at the appropriate point,
we "link" these events to the node set and attribute we have defined.

```{r link-present}
states <- linkEvents(states, sovchanges, attribute = "present")
# If you call the object now, what happens?
states
```

That's because the event list is only linked to the node set,
to update it when necessary.
You can see what is linked to which attribute here:

```{r states}
str(states)
```

We can continue on with our other two dynamic monadic variables.
Try this for yourself now.

```{r link-states-vars}
states <- linkEvents(states, regchanges, attribute = "regime") |>
  linkEvents(gdpchanges, attribute = "gdp")
str(states)
```


## Step 1b: Define networks ####

Next we want to define the dyadic or network elements:
the bilateral fisheries agreements and contiguity between the state nodes.

Since international fisheries management began before 1960,
there were already several bilateral fisheries agreements in place
at the start of our time period.
This is shown in the matrix

```{r examine-bilat-mat}
bilatnet[1:12, 1:12]  # head(bilatnet, n = c(12, 12))
```

Two things can be observed here. What are they?

So that goldfish knows how to handle this network, we define it so:

```{r define-bilat-net}
bilatnet <- defineNetwork(bilatnet, nodes = states, directed = FALSE)
```

We specify the nodes so that goldfish can check for consistency,
and relate the network to that nodeset when needed.

```{r examine-bilat-net}
class(bilatnet)
str(bilatnet)
bilatnet
```

By stating that this is an undirected network,
any updates will be forced to be symmetric.

Now that goldfish recognises the matrix as a network,
we can also associate an event list that updates it.
We use precisely the same function as before
(since we have defined our objects,
goldfish knows what to do and how to check it).

```{r link-bilat-net}
bilatnet <- linkEvents(bilatnet, bilatchanges, nodes = states)
bilatnet
```

TASK: You should now be able to do the same with the
initial contiguity network and the event list changing it.

```{r contig-net}
contignet <- defineNetwork(contignet, nodes = states, directed = FALSE) |>
  linkEvents(contigchanges, nodes = states)
class(contignet)
contignet
```

## Step 1c: Define dependent events ####

The final step in defining the data objects is
to identify the dependent events.
Since treaty dissolution is a rarer, more complex, and idiosyncratic process,
we will only look at those events that create a treaty tie between countries.

```{r define-dep-events}
createBilat <- defineDependentEvents(
  events = bilatchanges[bilatchanges$increment == 1,],
  nodes = states,
  defaultNetwork = bilatnet
)
```

Note that we define the default network
to which this dependent event list applies,
as well as the node set, so that structural effects
can be interpreted correctly.

```{r examine-dep-events}
class(createBilat)
createBilat
```

# Intermediate step: Visualisation ####

While not a required part of the modeling process,
we highly recommend the visualisation of your data
for analytic and diagnostic purposes.

goldfish includes wrappers for base R commands
to help extract monadic and dyadic information
for certain time points.

```{r hlp, eval = FALSE}
?as.data.frame.nodes.goldfish
?as.matrix.network.goldfish
```

We can use these functions to visually compare our network
at two (or more) different time periods using igraph.

```{r plot-teaching2, message=FALSE, warning=FALSE, fig.align='center'}
library(igraph)
library(manynet)

# network at the beginning of the event sequence
startStates <- as.data.frame(
  states,
  time = as.numeric(as.POSIXct("1960-01-02"))
)
startNet <- as.matrix(bilatnet, time = as.numeric(as.POSIXct("1960-01-02"))) |>
  as_igraph() |> 
  add_node_attribute("present", startStates$present) |>
  add_node_attribute("regime", startStates$regime) |>
  add_node_attribute("gdp", startStates$gdp)

# network at the end of the event sequence
endStates <- as.data.frame(states, time = as.numeric(as.POSIXct("1970-01-01")))
endNet <- as.matrix(bilatnet, time = as.numeric(as.POSIXct("1970-01-01"))) |>
  as_igraph() |>
  add_node_attribute("present", endStates$present) |>
  add_node_attribute("regime", endStates$regime) |>
  add_node_attribute("gdp", endStates$gdp)

# logical value indicating if states where present and with agreements
isStateActiveStart <- startStates$present & node_deg(startNet) > 0
isStateActiveEnd <- endStates$present & node_deg(endNet) > 0
isStateActive <- isStateActiveStart | isStateActiveEnd

# subset networks to active states
startNet <- delete_nodes(startNet, !isStateActive)
endNet <- delete_nodes(endNet, !isStateActive)

graphs(list(startNet, endNet), layout = "fr")
```

What can we observe?

# Step 2: Specify and estimate model ####

The second step is to specify and fit a model to this data.
This step can be broken up into several stages:

- Step 2a. Specify a model formula from the effects and variables available
- Step 2b. Calculate the change statistics associated with these effects
- Step 2c. Fit an appropriate model to these statistics

However, in goldfish we also have the option of accelerating this process
and using memory more efficiently by combining these three sub-steps in one.
Nonetheless, it can be helpful to think of 2a separately,
and recognise steps 2b and 2c as goldfish does them.

Let us first see how to specify the effects and which are currently available:

```{r hlp-effects, eval=FALSE}
vignette("goldfishEffects")
```

The data and model specification is similar (though not the same as)
Stadtfeld, Hollway, and Block 2017a

```{r estimate-init}
formula1 <-
  createBilat ~ inertia(bilatnet) + indeg(bilatnet, ignoreRep = TRUE) +
                trans(bilatnet, ignoreRep = TRUE) +
                tie(contignet) +
                alter(states$regime) + diff(states$regime) +
                alter(states$gdp) + diff(states$gdp)

estPrefs <- list(
  returnIntervalLogL = TRUE,
  initialDamping = 40,
  maxIterations = 30
  )

system.time(
  partnerModel <- estimate(
    formula1,
    model = "DyNAM", subModel = "choice_coordination",
    estimationInit = estPrefs
    )
)
```

Did the model converge? If not, you can restart the estimation process using
the same formula and current parameter estimates:

```{r estimate-rerun}
estPrefs <- list(
  returnIntervalLogL = TRUE,
  initialDamping = 40,
  maxIterations = 30,
  initialParameters = coef(partnerModel)
  )

partnerModel <- estimate(
  formula1,
  model = "DyNAM", subModel = "choice_coordination",
  estimationInit = estPrefs
  )
summary(partnerModel)
```

Let's interpret...
- Do states prefer partners with more partners?
- Do states prefer partners that are contiguous?
- Does transitivity matter?
- Do states prefer rich or democratic partners?
- Do states prefer similarly rich or democratic partners?

```{r estimate-c}
formula2 <-
  createBilat ~ inertia(bilatnet, weighted = TRUE) +
                indeg(bilatnet) + trans(bilatnet) +
                tie(contignet) + alter(states$regime) +
                diff(states$regime) + alter(states$gdp) + diff(states$gdp)

estPrefs <- list(
  returnIntervalLogL = TRUE,
  initialDamping = 40,
  maxIterations = 30,
  engine = "default_c"
  )

system.time(
  tieModel <- estimate(
    formula2,
    model = "DyNAM", subModel = "choice_coordination",
    estimationInit = estPrefs
    )
)
```

# Extensions...

In the most recent version of `{goldfish}`,
you will find some functions still under development.

One set of functions is to help integrate the results of `{goldfish}` models
with the wider world of statistical modeling.

We have implemented some "tidymodels" (or rather `{broom}`) functions
for extracting and printing the key results from goldfish results objects.
Here is an example on the current results object:

```{r broom, message=FALSE}
library(broom)
library(pixiedust)
dust(tidy(tieModel, conf.int = TRUE)) |>
  sprinkle(col = c(2:4, 6, 7), round = 3) |>
  sprinkle(col = 5, fn = quote(pvalString(value)))
```

```{r glance}
glance(tieModel)
```


Lastly, we have begun implementing further diagnostic functions that can
help users identify areas for improving their model specification.

```{r plot-examine, fig.width=6, fig.height=4, fig.align='center', fig.retina=3}
examineOutliers(tieModel)
examineChangepoints(tieModel)
```

For more, please see Hollway (2020) Network Embeddedness and
the Rate of Water Cooperation and Conflict.
